'use client';
import React, { useState, useEffect, useRef } from 'react';
import QRCode from 'qrcode';
import './Progress.css';
import { api } from '@/lib/api';
import { useAuth } from '@/contexts/AuthContext';
const Progress = ({ onBack }) => {
  const { user } = useAuth();
  const studentName = user?.full_name || (typeof window !== 'undefined' && localStorage.getItem('full_name'));
  const studentId = user?.id || (typeof window !== 'undefined' && localStorage.getItem('id'));
  const [ratings, setRatings] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [qrCodeUrl, setQrCodeUrl] = useState('');
  const fetchedRef = useRef(false);

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
  const generateQRCode = async (text) => {
    try {
      const url = await QRCode.toDataURL(text, {
        width: 200,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });
      setQrCodeUrl(url);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', err);
    }
  };

  useEffect(() => {
    const fetchRatings = async () => {
      try {
        if (!studentId || fetchedRef.current) {
          setError('ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
          setLoading(false);
          return;
        }
        fetchedRef.current = true;
        const response = await api.examPost('student-rating/', {
          student_id: studentId
        });
        
        if (response.data.status && response.data.data.length > 0) {
          setRatings(response.data.data[0]);
        } else {
          setError('–î–∞–Ω–Ω—ã–µ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } catch (err) {
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º 404, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        console.error('Error fetching ratings:', err);
      } finally {
        setLoading(false);
      }
    };

    // –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π studentId
    if (studentId) {
      fetchRatings();
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    if (studentId) {
      generateQRCode(studentId);
    }
  }, [studentId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∏–∞–≥—Ä–∞–º–º—ã
  const renderBar = (value, max = 100, label) => {
    const percentage = Math.min(value, max);
    return (
      <div className="bar-container">
        <div className="bar-label">{label}</div>
        <div className="bar">
          <div 
            className="bar-fill" 
            style={{ width: `${percentage}%` }}
          ></div>
          <span className="bar-value">{value}%</span>
        </div>
      </div>
    );
  };

  return (
    <div className="content-section">
      <div className="welcome-section">
        <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {studentName}! üëã</h2>
        <div className="student-info">
          <p className="student-id">–í–∞—à ID: <strong>{studentId}</strong></p>
          {qrCodeUrl && (
            <div className="qr-code-container">
              <p className="qr-label">QR-–∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</p>
              <img src={qrCodeUrl} alt="QR –∫–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞" className="qr-code" />
            </div>
          )}
        </div>
      </div>
      
      
    </div>
  );
};

export default Progress;