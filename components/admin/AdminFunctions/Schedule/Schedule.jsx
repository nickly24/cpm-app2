'use client';
import React, { useState, useEffect } from 'react';
import { api } from '@/lib/api';
import '../AdminFunctions.css';
import './Schedule.css';

const Schedule = () => {
  const [schedule, setSchedule] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingLesson, setEditingLesson] = useState(null);
  const [error, setError] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchSchedule();
  }, []);

  const fetchSchedule = async () => {
    setLoading(true);
    setError('');
    
    try {
      const response = await api.get('api/schedule');
      
      if (response.data.status) {
        setSchedule(response.data.schedule || []);
      } else {
        setError(response.data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      }
    } catch (err) {
      setError(err.response?.data?.error || err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      console.error('–û—à–∏–±–∫–∞:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleAddLesson = async (lessonData) => {
    try {
      const response = await api.post('api/schedule', lessonData);
      
      if (response.data.status) {
        await fetchSchedule(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        setShowAddModal(false);
        return { success: true };
      } else {
        return { success: false, error: response.data.error };
      }
    } catch (err) {
      return { 
        success: false, 
        error: err.response?.data?.error || err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      };
    }
  };

  const handleEditLesson = async (lessonId, lessonData) => {
    try {
      const response = await api.put('api/schedule/' + lessonId, lessonData);
      
      if (response.data.status) {
        await fetchSchedule(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        setEditingLesson(null);
        return { success: true };
      } else {
        return { success: false, error: response.data.error };
      }
    } catch (err) {
      return { 
        success: false, 
        error: err.response?.data?.error || err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      };
    }
  };

  const handleDeleteLesson = async (lessonId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ?')) {
      try {
        const response = await api.delete('api/schedule/' + lessonId);
        
        if (response.data.status) {
          await fetchSchedule(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        } else {
          setError(response.data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è');
        }
      } catch (err) {
        setError(err.response?.data?.error || err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
    }
  };

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  const groupedSchedule = schedule.reduce((acc, lesson) => {
    const day = lesson.day_of_week;
    if (!acc[day]) {
      acc[day] = [];
    }
    acc[day].push(lesson);
    return acc;
  }, {});

  const daysOrder = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', 
    '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
  ];

  return (
    <div className="admin-section">
      {/* Header */}
      <div className="section-header">
        <h2 className="section-title">üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</h2>
        <p className="section-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</p>
      </div>

      {/* Actions */}
      <div className="schedule-actions">
        <button 
          onClick={() => setShowAddModal(true)}
          className="btn btn-primary"
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ
        </button>
        <button 
          onClick={fetchSchedule}
          className="btn btn-secondary"
          disabled={loading}
        >
          {loading ? 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
      </div>

      {/* Error */}
      {error && (
        <div className="error-message">
          ‚ö†Ô∏è {error}
        </div>
      )}

      {/* Loading */}
      {loading && (
        <div className="loading-container">
          <div className="spinner"></div>
          <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...</p>
        </div>
      )}

      {/* Schedule Grid */}
      {!loading && (
        <div className="schedule-grid">
          {daysOrder.map(day => (
            <div key={day} className="schedule-day">
              <div className="day-header">
                <h3 className="day-title">{day}</h3>
                <span className="lesson-count">
                  {groupedSchedule[day]?.length || 0} –∑–∞–Ω—è—Ç–∏–π
                </span>
              </div>
              
              <div className="lessons-list">
                {groupedSchedule[day]?.length > 0 ? (
                  groupedSchedule[day].map(lesson => (
                    <div key={lesson._id} className="lesson-card">
                      <div className="lesson-time">
                        {lesson.start_time} - {lesson.end_time}
                      </div>
                      <div className="lesson-content">
                        <h4 className="lesson-name">{lesson.lesson_name}</h4>
                        <p className="lesson-teacher">üë®‚Äçüè´ {lesson.teacher_name}</p>
                        <p className="lesson-location">üìç {lesson.location}</p>
                      </div>
                      <div className="lesson-actions">
                        <button
                          onClick={() => setEditingLesson(lesson)}
                          className="btn btn-sm btn-primary"
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          onClick={() => handleDeleteLesson(lesson._id)}
                          className="btn btn-sm btn-danger"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="no-lessons">
                    <p>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</p>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Add Lesson Modal */}
      {showAddModal && (
        <LessonModal
          onClose={() => setShowAddModal(false)}
          onSave={handleAddLesson}
          title="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"
        />
      )}

      {/* Edit Lesson Modal */}
      {editingLesson && (
        <LessonModal
          lesson={editingLesson}
          onClose={() => setEditingLesson(null)}
          onSave={(data) => handleEditLesson(editingLesson._id, data)}
          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ"
        />
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
const LessonModal = ({ lesson, onClose, onSave, title }) => {
  const [formData, setFormData] = useState({
    day_of_week: lesson?.day_of_week || '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    start_time: lesson?.start_time || '09:00',
    end_time: lesson?.end_time || '10:30',
    lesson_name: lesson?.lesson_name || '',
    teacher_name: lesson?.teacher_name || '',
    location: lesson?.location || ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    if (!formData.lesson_name.trim()) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }
    
    if (!formData.teacher_name.trim()) {
      setError('–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }
    
    if (!formData.location.trim()) {
      setError('–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    if (formData.start_time >= formData.end_time) {
      setError('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const result = await onSave(formData);
      
      if (result.success) {
        onClose();
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    } finally {
      setIsSubmitting(false);
    }
  };

  const days = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', 
    '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
  ];

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={e => e.stopPropagation()}>
        <div className="modal-header">
          <h3>{title}</h3>
          <button onClick={onClose} className="modal-close">√ó</button>
        </div>
        
        <form onSubmit={handleSubmit} className="modal-body">
          <div className="form-group">
            <label>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</label>
            <select
              value={formData.day_of_week}
              onChange={(e) => setFormData({...formData, day_of_week: e.target.value})}
              required
            >
              {days.map(day => (
                <option key={day} value={day}>{day}</option>
              ))}
            </select>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
              <input
                type="time"
                value={formData.start_time}
                onChange={(e) => setFormData({...formData, start_time: e.target.value})}
                required
              />
            </div>
            <div className="form-group">
              <label>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
              <input
                type="time"
                value={formData.end_time}
                onChange={(e) => setFormData({...formData, end_time: e.target.value})}
                required
              />
            </div>
          </div>

          <div className="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è</label>
            <input
              type="text"
              value={formData.lesson_name}
              onChange={(e) => setFormData({...formData, lesson_name: e.target.value})}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
              required
            />
          </div>

          <div className="form-group">
            <label>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</label>
            <input
              type="text"
              value={formData.teacher_name}
              onChange={(e) => setFormData({...formData, teacher_name: e.target.value})}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò."
              required
            />
          </div>

          <div className="form-group">
            <label>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</label>
            <input
              type="text"
              value={formData.location}
              onChange={(e) => setFormData({...formData, location: e.target.value})}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—É–¥–∏—Ç–æ—Ä–∏—è 101"
              required
            />
          </div>

          {error && (
            <div className="error-message">
              ‚ö†Ô∏è {error}
            </div>
          )}

          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn btn-secondary">
              –û—Ç–º–µ–Ω–∞
            </button>
            <button 
              type="submit" 
              disabled={isSubmitting}
              className="btn btn-primary"
            >
              {isSubmitting ? 'üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '‚úì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Schedule;
