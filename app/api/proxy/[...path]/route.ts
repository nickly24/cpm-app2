import { NextRequest, NextResponse } from 'next/server';
import { API_CONFIG } from '@/lib/config';

// –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ—Ç route –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (–Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏)
export const dynamic = 'force-dynamic';

export async function GET(
  request: NextRequest,
  context: { params: Promise<{ path: string[] }> }
) {
  const params = await context.params;
  return handleProxy(request, params.path);
}

export async function POST(
  request: NextRequest,
  context: { params: Promise<{ path: string[] }> }
) {
  const params = await context.params;
  return handleProxy(request, params.path);
}

export async function PUT(
  request: NextRequest,
  context: { params: Promise<{ path: string[] }> }
) {
  const params = await context.params;
  return handleProxy(request, params.path);
}

export async function DELETE(
  request: NextRequest,
  context: { params: Promise<{ path: string[] }> }
) {
  const params = await context.params;
  return handleProxy(request, params.path);
}

async function handleProxy(
  request: NextRequest,
  pathSegments: string[]
) {
  try {
    // –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø—É—Å—Ç–æ–π - –≤—Å–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
    const publicEndpoints: string[] = [];
    
    const path = pathSegments.join('/');
    const isPublicEndpoint = publicEndpoints.some(endpoint => path.startsWith(endpoint));
    
    // –ï—Å–ª–∏ endpoint –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π, —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!isPublicEndpoint) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é - –ø–æ–ª—É—á–∞–µ–º cookie —Å —Å–µ—Å—Å–∏–µ–π
      const authSession = request.cookies.get('auth_session');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ cookies –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev)
      if (process.env.NODE_ENV === 'development') {
        const allCookies = request.cookies.getAll();
        console.log('All cookies:', allCookies.map(c => c.name));
      }
      
      if (!authSession || !authSession.value || authSession.value.trim() === '') {
        console.warn(`‚ùå Unauthorized request to proxy: ${request.method} ${request.url} - No session cookie found`);
        return NextResponse.json(
          { error: 'Unauthorized: No valid session found. Please log in first.' },
          { status: 401 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (–ø–∞—Ä—Å–∏–º JSON)
      let sessionData;
      try {
        sessionData = JSON.parse(authSession.value);
      } catch (parseError) {
        console.error('‚ùå Failed to parse session cookie:', parseError);
        return NextResponse.json(
          { error: 'Unauthorized: Invalid session format' },
          { status: 401 }
        );
      }
      
      // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!sessionData || typeof sessionData !== 'object') {
        console.warn(`‚ùå Invalid session data type: ${typeof sessionData}`);
        return NextResponse.json(
          { error: 'Unauthorized: Invalid session data structure' },
          { status: 401 }
        );
      }
      
      if (!sessionData.role || !sessionData.id || !sessionData.full_name) {
        console.warn(`‚ùå Invalid session data - missing required fields:`, {
          hasRole: !!sessionData.role,
          hasId: !!sessionData.id,
          hasFullName: !!sessionData.full_name,
          sessionKeys: Object.keys(sessionData)
        });
        return NextResponse.json(
          { error: 'Unauthorized: Invalid session data - missing required fields' },
          { status: 401 }
        );
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
      if (process.env.NODE_ENV === 'development') {
        console.log(`‚úÖ Authorized request from user: ${sessionData.role} (${sessionData.id}) - ${request.method} ${path}`);
      }
    } else {
      // –ü—É–±–ª–∏—á–Ω—ã–π endpoint - –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`üåê Public endpoint accessed: ${request.method} ${path}`);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å
    const url = new URL(request.url);
    // –£–±–∏—Ä–∞–µ–º trailing slash –∏–∑ URL –±—ç–∫–µ–Ω–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    const backendBase = (url.searchParams.get('backend') === 'exam' 
      ? API_CONFIG.EXAM_BACKEND 
      : API_CONFIG.MAIN_BACKEND).replace(/\/$/, '');
    
    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ backend
    const searchParams = new URLSearchParams(url.searchParams);
    searchParams.delete('backend');
    const queryString = searchParams.toString();
    
    // –°–æ–∑–¥–∞—ë–º URL –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
    let backendUrl = `${backendBase}/${path}`;
    if (queryString) {
      backendUrl += `?${queryString}`;
    }
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ —Å–ª–µ—à–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º ://
    backendUrl = backendUrl.replace(/\/+/g, '/').replace(':/', '://');
    
    console.log(`Proxying ${request.method} request to: ${backendUrl}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    let body = undefined;
    const contentType = request.headers.get('content-type');
    if (contentType?.includes('application/json')) {
      try {
        body = await request.json();
      } catch (e) {
        // ignore
      }
    }
    
    // –°–æ–∑–¥–∞—ë–º options –¥–ª—è fetch
    const fetchOptions: RequestInit = {
      method: request.method,
      headers: {
        'Content-Type': 'application/json',
      },
    };
    
    if (body) {
      fetchOptions.body = JSON.stringify(body);
    }
    
    const response = await fetch(backendUrl, fetchOptions);
    
    if (!response.ok) {
      console.error(`Backend error: ${response.status}`);
      return NextResponse.json(
        { error: await response.text() },
        { status: response.status }
      );
    }
    
    const data = await response.json();
    
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error('Proxy error:', error);
    return NextResponse.json(
      { error: 'Proxy failed: ' + error.message },
      { status: 500 }
    );
  }
}

